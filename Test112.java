/*=============================================
	■■■ 클래스 고급 ■■■
	 - 상속 관계에 있는 클래스들 간의 캐스팅
	 - 업 캐스팅, 다운 캐스팅
==============================================*/


// 부모 클래스
class SuperTest112
{
	public int a=10, b=20;

	public void write()
	{
		System.out.println("슈퍼 클래스... write() 메소드,,,");
	}

	public int hap()
	{
		return a+b;
	}
}



// 자식클래스
class SubTest112 extends SuperTest112
{
	public int b=100, c=200;

	@Override
	public int hap()
	{
		return a+b+c;
	}

	public void print()
	{
		System.out.println("서브 클래스... print() 메소드,,,");
	}
	
}


//main()메소드를 포함하는 외부의 다른 클래스
public class Test112
{
	public static void main(String[] args)
	{
		//sub class 기반인스턴스 생성
		SubTest112 ob1 = new SubTest112();
		System.out.println("ob1.b : " + ob1.b);
		//--==>> ob1.b : 100

		// ○ 업 캐스팅
		SuperTest112 ob2 = ob1;		//SuperTest112 ob2 =(SuperTest112)ob1; 과 동일
		// <자동 형 변환>과 비슷한 느낌으로 작은 것(자식)을 큰 것(부모)에 담을 수 있다.
		// 자식 클래스 = 하위 / 부모 클래스 = 상위 .... 
		// 생성자에 자동으로 super()가 호출되기 때문이다....


		System.out.println("ob2.b : "+ ob2.b);
		//--==>> ob2.b : 20
		//--변수는 객체별로 따로 할당되므로
		//	변수 b는 ob2의 변수이다.

		System.out.println("합 : " + ob2.hap());
		//--==>> 합 : 310
		//--hap()메소드는 오버라이딩되어 있고
		//	ob2는 ob1을 업캐스팅한 상태의 객체이므로
		//	『SuperTest112』의 hap()메소드를 호출하는 것이 아니라
		//  『SubTest112』에서 재정의한 hap() 메소드를 호출하게 된다.
		//	즉, 메소드는 업캐스팅이 되더라도
		//	재정의한 이상,,, 원래의 기능으로 되돌릴 수 없다.

		ob2.write();
		//--==>> 슈퍼 클래스... write() 메소드,,,

		//ob2.print();
		//--==>> 에러 발생


		//○ 다운 캐스팅
		((SubTest112)ob2).print();
		//--==>> 서브 클래스... print() 메소드,,,



		///==================추가 관찰
		// 다운캐스팅 가능여부

		SuperTest112 ob3 = new SuperTest112();
		SubTest112 ob4;

		//System.out.println(ob3.c);
		//--==>> 에러 발생
		//상위객체는 하위객체의 멤버에 접근하는 것이 불가능...

		//ob4 = ob3; ==>> 에러발생

		//ob4 = (SubTest112)ob3; ==>> 에러발생

		//※ 작성된 구문의 문법적인 구조만 봤을 때
		//	 다운 캐스팅이 이루어지는 상황이다.
		//	 하지만 정상적인 캐스팅이 이루어지지않는다.
		//	 현재 SubTest112 객세에 대해 메모리 할당이 이루어지지 않은 상태이기 때문에
		//	 다운 캐스팅은 불가능한 것


	/*
	○ 업 캐스팅, 다운 캐스팅이 정상적으로 이루어지는 경우-----------------

		1. 하위 객체 생성;
		2. 상위 = 하위;				//업캐스팅     [정상]
		3. 하위 = 상위;				//에러 발생
		4. 하위 = (하위)상위;		//다운 캐스팅  [정상]


	○ 다운 캐스팅이 정상적으로 이루어 지지 않는 경우-----------------
		
		1. 상위 객체 생성;
		2. 하위 = 상위;				//에러발생
		3. 하위 =(하위)상위;		//다운 캐스팅이지만 런타임에러 발생...
									//상위 객체 생성 시 하위 객체가 호출되지않기때문에,,,
									//하위 공간에 담을 수 없다.

	※ 업캐스팅은 항상 가능, 다운캐스팅은 경우에 따라 가능


	====>> 추상클래스가 상위여도 업캐스팅가능 왜냐면 하위에서 덮어쓰기하면서 재정의되니까 추상이 아니야~~~ 가능!!!!!!!!
	*/

		 

	}
}